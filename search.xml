<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown basic syntax</title>
    <url>/2020/06/18/tools/markdown-basic-syntax/</url>
    <content><![CDATA[<p>This is abstract</p>
<a id="more"></a>

<p><strong>一. 标题</strong></p>
<p>在你的标题前加上#，几级标题就用几个#，例如：</p>
<p><strong>sara</strong></p>
<h2 id="er二级标题"><a href="#er二级标题" class="headerlink" title="er二级标题"></a>er二级标题</h2><p><em>斜体</em></p>
<p><strong>加粗</strong></p>
<p><del>删除线</del></p>
<blockquote>
<p>这是引用</p>
<blockquote>
<p>这是嵌套引用</p>
<blockquote>
<p>这也是嵌套引用</p>
<blockquote>
<p>这又又又是嵌套引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>下面是分割线</p>
<hr>
<h2 id="下面也是分割线"><a href="#下面也是分割线" class="headerlink" title="下面也是分割线"></a>下面也是分割线</h2><p><img src="https://cn.toursforfun.com/images/image/20190904/20190904164008_98424.jpg" alt="it is portugal" title="portugal"></p>
<p><a href="www.baidu.com" title="传送门">上一篇博客</a></p>
<ul>
<li>这是无序列表</li>
<li>这也是无序列表</li>
<li>这也是无序列表</li>
</ul>
<ul>
<li>这也是无序列表</li>
<li>这也是无序列表</li>
<li>这也是无序列表</li>
</ul>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<ol>
<li>有序列表<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>午休恶变</li>
</ul>
</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<ul>
<li>无序列表<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无需列表</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">魏</th>
<th align="center">蜀</th>
<th align="center">吴</th>
</tr>
</thead>
<tbody><tr>
<td align="center">曹操</td>
<td align="center">刘备</td>
<td align="center">孙权</td>
</tr>
<tr>
<td align="center">徐晃</td>
<td align="center">关羽</td>
<td align="center">周瑜</td>
</tr>
<tr>
<td align="center">许攸</td>
<td align="center">张飞</td>
<td align="center">孙策</td>
</tr>
</tbody></table>
<p><code>here is the code</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">here is the code</span><br><span class="line">here is the code</span><br><span class="line">here is the code</span><br><span class="line"></span><br><span class="line">Public Class buz()&#123;</span><br><span class="line">    void fuck(</span><br><span class="line">        system.out.printline(&quot;fuck you!&quot;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">op&#x3D;&gt;operation: My Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line">para&#x3D;&gt;parallel: parallel tasks</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;para</span><br><span class="line">para(path1, bottom)-&gt;sub1(right)-&gt;op1</span><br><span class="line">para(path2, top)-&gt;op1</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">a--&gt;|b|c;</span><br><span class="line">c--&gt;|d|e;</span><br><span class="line">e--&gt;|f|c;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">　　client---core;</span><br><span class="line">　　client---common;</span><br><span class="line">　　core---common;</span><br><span class="line">　　common---portal;</span><br><span class="line">　　common---Biz;</span><br><span class="line">　　Biz---ConfigService;</span><br><span class="line">　　Biz---AdminService;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">a---b;</span><br><span class="line">a---c;</span><br><span class="line">b---c;</span><br><span class="line">c---d;</span><br><span class="line">d---e;</span><br><span class="line">e---f;</span><br><span class="line">c---f;</span><br><span class="line">a---f;</span><br><span class="line">f---g;</span><br><span class="line">g---a;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>markdown</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Beginners Guide to DNS</title>
    <url>/2020/06/18/network/Understanding-DNS-Beginners-Guide-to-DNS/</url>
    <content><![CDATA[<p>dns (domain name system) is one of the most important technologies/services on the internet, as without it the internet would be very difficult to use.</p>
<p>dns provides a name to number (ip address) mapping or translation, allowing internet users to use, easy to remember names, and not numbers to access resources on a network and the internet.</p>
<a id="more"></a>

<p><strong>DNS Basics  – Understanding Why we Need it</strong><br>All devices (computers etc) that are connected to the Internet, your own network, or company network are identified by an IP address; which is a number.</p>
<p>To make it easy for people to remember names (host names) are used to identify individual computers on a network.</p>
<p>On early computer networks a simple text file called a hosts file was created that mapped host names to IP addresses.</p>
<p>This enabled people to refer to other computers by the name, and their computer translated that name to an IP address when it needed to communicate with it.</p>
<p>Here is the host file taken from my PC. It comes with all Windows machines</p>
<p><img src="http://www.steves-internet-guide.com/wp-content/uploads/2012/01/hosts-file1.jpg" alt=""></p>
<p>The location for the hosts file is normally C\windows\system32\drivers\etc</p>
<p>As network sizes increased the hosts file approach became impractical due to the fact that:</p>
<ul>
<li>It needed to be stored on each computer</li>
</ul>
<ul>
<li>The text file could take a along time to process due to the fact that it was unstructured.</li>
</ul>
<ul>
<li>Updates were difficult to manage as all of the computers would need to be given an updated file.<br>To overcome these (and other) limitations the DNS system was developed.</li>
</ul>
<p>The DNS system essentially provides for:</p>
<ul>
<li>A way to organize the names- Domain name structure</li>
</ul>
<ul>
<li>Protocols ,services and methods for storing,updating, and retrieving IP addresses for hosts computers.- DNS System<br>From the perspective of an end user you can consider the DNS system as a structured hosts file.<h2 id="Domain-Name-Structure"><a href="#Domain-Name-Structure" class="headerlink" title="Domain Name Structure"></a>Domain Name Structure</h2></li>
</ul>
<p>The hosts file is simply a list of names and IP addresses with no structure making it difficult to scale to a large number of machines.</p>
<p>The solution is to place the machines into administrative areas known as domains, and arrange the domains in a hierarchy.</p>
<p>This takes the form of a tree like structure that resembles the file system structure found on computers. See Understanding The Domain Name Structure</p>
<p>DNS System<br>The DNS system consists of many Domain Name servers that together provide the name to IP address mapping for registered devices (usually servers) on the Internet.</p>
<p>The main DNS severs (root servers) are owned and managed by a variety of different organizations, and are located mainly in the USA.</p>
<p>Here is a list <a href="http://www.iana.org/domains/root/servers" target="_blank" rel="noopener">http://www.iana.org/domains/root/servers</a>.</p>
<p>Other companies including ISPs have their own DNS servers which are linked to the root servers in a hierarchical fashion providing a distributed system.</p>
<p>The following video explain both the host file and its problems, and the basics of how DNS works.</p>
<p><a href="https://youtu.be/Vgc-Yqf_Tt4" target="_blank" rel="noopener">https://youtu.be/Vgc-Yqf_Tt4</a></p>
<p>Fortunately you don’t need to manage a DNS server or create DNS records to use the Internet.</p>
<p>However you need to have access to a DNS server.</p>
<p>To access a DNS server you will need the IP address of the DNS server.</p>
<p>This is usually supplied to you by your ISP (Internet Service Provider).</p>
<p>Most client computers/devices will be configured to obtain an IP and a DNS server address automatically. (see below)</p>
<p><img src="http://www.steves-internet-guide.com/wp-content/uploads/2012/04/windows-settings-ip-dns-automatically.jpg" alt=""></p>
<p>You can Check what IP address and what DNS address you have been assigned by typing ipconfig/all at the command line.</p>
<p><img src="http://www.steves-internet-guide.com/wp-content/uploads/2012/04/ipconfig-alljpg.jpg" alt=""></p>
<p>If DNS isn’t working properly then you will be unable to connect to other computers on the Internet using their name, but you can still connect using their IP address if you know it.</p>
<p>DNS Services- Open DNS and Google DNS<br>Most Home users will use the DNS severs provided by their ISP via their home router.</p>
<p>However you can use alternative DNS servers like OpenDNS and Google Public DNS.</p>
<p>This does mean that you will need to manually add these server addresses to your DNS settings.</p>
<p>Why Use Alternative DNS Services?<br>The standard DNS server doesn’t provide any form of protection from malicious sites.</p>
<p>Because DNS is the gateway to the Internet there are many companies that provide security related services based on the public DNS service.</p>
<p>They do this by filtering DNS requests. Most will detect phishing and spam sites, and many will provide protection from adult related sites.</p>
<p>Most security internet product suites will use some form of filtered DNS.</p>
<p>Open DNS was one of the first companies to do this and they offer family protection for free.</p>
<p>DNS server addresses are: 208.67.222.222 and 208.67.220.220</p>
<p>Google also provide a public DNS service. This doesn’t provide filtering, but may provide a faster DNS service than your ISP.</p>
<p>If your ISP blocks access to an address for some reason using an alternative DNS server like Google Public DNS may avoid the ISP blocks.</p>
<p>IP addresses are : 8.8.8.8 and 8.8.4.4</p>
<p>Basic DNS Concepts<br>There are many terms that you will see when reading about DNS.</p>
<p>Terms like zones, zone files, caching server etc.</p>
<p>This video is a good introduction to understanding those basic terms.</p>
<p><a href="https://youtu.be/T6ZD8st8S2w" target="_blank" rel="noopener">https://youtu.be/T6ZD8st8S2w</a></p>
<p>See DNS Zones and Zone Files Explained</p>
<p>DNS Name Resolution<br>To resolve a host name to an IP address using DNS you will need to have s DNS client on your machine, and the client must know the IP address of a DNS server.</p>
<p>The DNS client queries it’s DNS server which then follows through a process to get an answer- See DNS lookups explained.</p>
<p>Host Name Resolution<br>DNS and Host are two name resolution methods but they are not the only ones.</p>
<p>A Windows client will use DNS,Hosts and other methods to resolve a host name or computer name to an IP address. See Understanding Host name resolution methods.</p>
<p>Dynamic DNS<br>Internal IP addresses are normally are non static as they are usually assigned by a DHCP server.</p>
<p>In large corporate networks that use their own internal DNS and DHCP servers a need to keep the DNS servers up to date was required.</p>
<p>DDNS (Dynamic DNS updates) was introduced  to solve this problem- Wiki</p>
<p>The basic procedure is:</p>
<p>The Machine gets IP address from DHCP<br>The Machine or the DHCP server contacts the DNS server and updates the DNS record with the IP address and DNS name.<br>Home and small business networks don’t use their own DNS servers because they don’t have so many servers/machines,and they don’t really need DDNS either because  all their machines are in the same broadcast domain.</p>
<p>Because they are in the same broadcast domain windows networking will resolve the names and IP addresses, even if the IP addresses change.</p>
<p>However small business/home network may need DDNS if they want to provide access to internal resources from across the internet. See Dynamic DNS and Services Guide</p>
<p>DNS Problems<br>If you have problems connecting to resources on the Internet then DNS is one of the first things to check.</p>
<p>The main troubleshooting tool is nslookup and it is available on all of the main operating systems. See using nslookup .</p>
<p>Summary<br>The DNS system provides a domain name to IP address mapping for devices connected to the Internet, and it is crucial to the working of the Internet.</p>
<p>Usually you don’t need to worry about it as your are automatically assigned the address of the DNS server by your ISP and Home router.</p>
<p>If you are concerned about security then consider using a filtered DNS service like Open DNS.</p>
<p>Related Tutorials and Resources:</p>
<p>DNS Zone Fikes Explained<br>Understanding IP addresses<br>DNS wiki<br>DNS Essentials video</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成，持续交付，持续部署（CI/CD）简介</title>
    <url>/2020/07/02/tools/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%8C%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98%EF%BC%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2%EF%BC%88CI-CD%EF%BC%89%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>软件开发周期中需要一些可以帮助开发者提升速度的自动化工具。其中工具最重要的目的是促进软件项目的持续集成与交付。通过CI/CD工具，开发团队可以保持软件更新并将其迅速的投入实践中。CI/CD也被认为是敏捷开发的最重要实践之一。</p>
<p><img src="https://i.imgur.com/Aw83gvC.png" alt="CI/CD示意图"></p>
<h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>从上图可以看到，持续集成应该至少包括以下几部分：</p>
<ul>
<li>自动化构建Continuous Build</li>
<li>自动化测试Continuous Test</li>
<li>自动化集成Continuous Intergration</li>
</ul>
<ol>
<li>自动化构建</li>
</ol>
<p>包括以下过程：</p>
<ul>
<li>将源码编译成为二进制码</li>
<li>打包二进制码</li>
<li>运行自动化测试</li>
<li>生成文档</li>
<li>生成分发媒体（例如：Debian DEB、Red Hat RPM或者Windows MSI文件）</li>
</ul>
<p>所以，自动化构建，从功能角度分，最关键的是三部分：版本控制工具、构建工具、CI服务器。而其中最核心的又是构建工具。其他开源的、与持续集成相关的工具也有很多，但大多数是辅助性的工具。</p>
<p>(1)版本控制工具</p>
<p>有时，版本控制又称为配置管理（SCM），所以版本控制工具同时也是配置管理工具。在各类版本控制的开源软件中，最著名的莫过于CVS、SVN（Subversion）、GIT三个了。<br>这三个工具各有千秋。其中，GIT支持离线工作，更适合开源软件或者开发人员不能集中办公情况下的版本管理工作。同时，SVN和GIT可以配合使用。</p>
<p>（2）构建工具</p>
<p>构建工具是持续集成的核心，它对源代码进行自动化编译、测试、代码检查，以及打包程序、部署（发布）到应用服务器上。从配置管理工具上下载最新源代码后，所有的后续工作几乎都可以通过构建工具完成。<br>在java开发中，比较有名的构建工具就是Ant、Maven、Gradle。在PHP开发中，Phing（基于Ant）也比较有名。同样的，Maven也可通过相关的PHP-Maven插件完成对PHP开发构建的支持。</p>
<p>（3）CI服务器</p>
<p>CI服务器的主要作用就是提供一个平台，用于整合版本控制和构建工作，并管理、控制自动化的持续集成。<br>开源软件中，比较有名的CI服务器包括Jenkins、CruiseControl、Continuum。而比较有名的商业化CI服务器是TeamCity、Bamboo、Pulse等。</p>
<p>（4）其他工具</p>
<p>很多工具可以通过与构建工具、CI工具相结合（当然，其中有很多工具也可以单独工作），来完成更多的自动测试、报告生成等工作。根据工具不同，其具体的结合方法也不同，但大体都是通过插件形式进行结合的。例如：</p>
<ul>
<li>Maven中通过依赖和plugin方式引入第三方工具</li>
<li>Jenkins主要通过各类插件引入第三方工具</li>
</ul>
<p>这些工具种类实在太多，可以根据实际工作需要进行选择。</p>
<p>2.自动化测试</p>
<p>自动化测试是持续集成必不可少的一部分，基本上，没有自动化测试的持续集成，都很难称之为真正的持续集成。我们希望持续集成能够尽早的暴露问题，但这远非配置一个 Hudson/Jenkins服务器那么简单，只有真正用心编写了较为完整的测试用例，并一直维护它们，持续集成才能孜孜不倦地运行测试并第一时间报告问题。 </p>
<p>测试自动化是使用特定的软件（独立于被测试的软件）来控制测试的执行以及比较实际输出与预期输出。测试自动化可以将某些重复但必要的任务自动化，或者执行某些难以手动执行的额外测试。</p>
<p>自动化测试还包括单元测试、集成测试、系统测试、验收测试、性能测试等，在不同的场景下，它们都能为软件开发带来极大的价值。</p>
<h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><p><img src="https://i.imgur.com/9j15a1a.png" alt="持续交付"></p>
<p>持续交付（Continuous Delivery, CD）是一种软件工程的手段，让软件在短周期内产出，确保软件随时可以被可靠地发布。其目的在于更快、更频繁地构建、测试以及发布软件。通过加强对生产环境的应用进行渐进式更新，这种手段可以降低交付变更的成本与风险。一个简单直观的与可重复的部署过程对于持续交付来说是很重要的。</p>
<p><img src="https://i.imgur.com/RrsuJwM.png" alt="持续交付过程"></p>
<h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><p><img src="https://i.imgur.com/jOiFUHt.png" alt="持续部署"></p>
<p>如图所示，持续部署与持续交付之间的差异就是前者将部署自动化了。<br>在持续交付的实践中，交付的目标是QA，但是实际上，软件最终是要交付到客户手上的。在SaaS领域里，持续部署采用得比较广泛，因为服务比较容易做到静默升级。<br>采用持续部署的前提是自动化测试的覆盖率足够高。<br>采用持续部署的好处是能减少运维的工作量，缩短新特性从开发到实际交付的周期。</p>
<h3 id="CI-CD具体实现"><a href="#CI-CD具体实现" class="headerlink" title="CI/CD具体实现"></a>CI/CD具体实现</h3><p>常见CI/CD工具及其比较:</p>
<p><img src="https://i.imgur.com/RA0UWd8.png" alt="CI/CD工具比较"></p>
<p>这里的支持，意思应该是直接的支持，例如Jenkins，其实和git结合也很简单，通过脚本就可以实现。</p>
<h3 id="持续集成工具集之-Jenkins简介"><a href="#持续集成工具集之-Jenkins简介" class="headerlink" title="持续集成工具集之 Jenkins简介"></a>持续集成工具集之 Jenkins简介</h3><p>Jenkins 是一个可扩展的持续集成引擎。</p>
<p>1.主要用于：</p>
<ul>
<li>持续、自动地构建/测试软件项目。</li>
<li>监控一些定时执行的任务。Jenkins拥有的特性包括：</li>
</ul>
<p>2.Jenkins拥有的特性包括：</p>
<ul>
<li>易于安装-只要把jenkins.war部署到servlet容器，不需要数据库支持。</li>
<li>易于配置-所有配置都是通过其提供的web界面实现。</li>
<li>集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知。</li>
<li>生成JUnit/TestNG测试报告</li>
<li>分布式构建支持Jenkins能够让多台计算机一起构建/测试。</li>
<li>文件识别:Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li>
<li>插件支持:支持扩展插件，你可以开发适合自己团队使用的工具。</li>
</ul>
<p>3.Jenkins的出现</p>
<p>目前持续集成(CI)已成为当前许多软件开发团队在整个软件开发生命周期内侧重于保证代码质量的常见做法。它是一种实践，旨在缓和和稳固软件的构建过程。并且能够帮助您的开发团队应对如下挑战：</p>
<ul>
<li>软件构建自动化 ：配置完成后，CI系统会依照预先制定的时间表，或者针对某特定事件，对目标软件进行构建。</li>
<li>构建可持续的自动化检查 ：CI系统能持续地获取新增或修改后签入的源代码，也就是说，当软件开发团队需要周期性的检查新增或修改后的代码时，CI系统会不断确认这些新代码是否破坏了原有软件的成功构建。这减少了开发者们在检查彼此相互依存的代码中变化情况需要花费的时间和精力。</li>
<li>构建可持续的自动化测试 ：构建检查的扩展部分，构建后执行预先制定的一套测试规则，完成后触发通知(Email,RSS等等)给相关的当事人。</li>
<li>生成后后续过程的自动化 :当自动化检查和测试成功完成，软件构建的周期中可能也需要一些额外的任务，诸如生成文档、打包软件、部署构件到一个运行环境或者软件仓库。这样，构件才能更迅速地提供给用户使用。</li>
</ul>
<p>部署一个CI系统需要的最低要求是，一个可获取的源代码的仓库，一个包含构建脚本的项目。</p>
<p>下图概括了CI系统的基本结构：<br>4.使用Jenkins的一些理由：</p>
<p><img src="https://i.imgur.com/uNmVJlW.jpg" alt="Jenkins工作示意图"></p>
<p>该系统的各个组成部分是按如下顺序来发挥作用的：</p>
<ul>
<li>开发者检入代码到源代码仓库。</li>
<li>CI系统会为每一个项目创建了一个单独的工作区。当预设或请求一次新的构建时，它将把源代码仓库的源码存放到对应的工作区。</li>
<li>CI系统会在对应的工作区内执行构建过程。</li>
<li>（配置如果存在）构建完成后，CI系统会在一个新的构件中执行定义的一套测试。完成后触发通知(Email,RSS等等)给相关的当事人。</li>
<li>（配置如果存在）如果构建成功，这个构件会被打包并转移到一个部署目标(如应用服务器)或存储为软件仓库中的一个新版本。软件仓库可以是CI系统的一部分，也可以是一个外部的仓库，诸如一个文件服务器或者像Java.NET、 SourceForge之类的网站。</li>
<li>CI系统通常会根据请求发起相应的操作，诸如即时构建、生成报告，或者检索一些构建好的构件。</li>
</ul>
<p>Jenkins就是这么一个CI系统。之前叫做Hudson。</p>
<ul>
<li>是所有CI产品中在安装和配置上最简单</li>
<li>基于Web访问，用户界面非常友好、直观和灵活，在许多情况下，还提供了AJAX的即时反馈。</li>
<li>Jenkins是基于Java开发的(如果你是一个Java开发人员，这是非常有用的)，但它不仅限于构建基于Java的软件。</li>
<li>Jenkins拥有大量的插件。这些插件极大的扩展了Jenkins的功能；它们都是开源的，而且它们可以直接通过web界面来进行安装与管理。</li>
<li></li>
</ul>
<p>5.Jenkins的目标</p>
<p>Jenkins的主要目标是监控软件开发流程，快速显示问题。所以能保证开发人员以及相关人员省时省力提高开发效率。</p>
<p>CI系统在整个开发过程中的主要作用是控制：当系统在代码存储库中探测到修改时，它将运行构建的任务委托给构建过程本身。如果构建失败了，那么CI系统将通知相关人员，然后继续监视存储库。它的角色看起来是被动的；但它确能快速反映问题。</p>
<p>特别是它具有以下优点：</p>
<ul>
<li>Jenkins一切配置都可以在web界面上完成。有些配置如MAVEN_HOME和Email，只需要配置一次，所有的项目就都能用。当然也可以通过修改XML进行配置。</li>
<li>支持Maven的模块(Module)，Jenkins对Maven做了优化，因此它能自动识别Module，每个Module可以配置成一个job。相当灵活。</li>
<li>测试报告聚合，所有模块的测试报告都被聚合在一起，结果一目了然，使用其他CI，这几乎是件不可能完成的任务。</li>
<li>构件指纹(artifact fingerprint)，每次build的结果构件都被很好的自动管理，无需任何配置就可以方便的浏览下载。</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS上RHEL-ec2 vsftpd搭建常见问题总结</title>
    <url>/2020/07/01/development/linux/AWS%E4%B8%8ARHEL-ec2-vsftpd%E6%90%AD%E5%BB%BA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>上篇文章主要讲了如何在AWS-RHEL上搭建ftp服务器，由于各种原因，大家还是会遇到各种各样的问题，本篇文章来讨论下自己在搭建的过程中遇到的问题及解决方案。</p>
<p>正常情况，打开浏览器，地址栏输入：<br><code>ftp://ip地址</code><br>回车，弹出输入用户名密码的窗口，确认，如果成功则会显示/var/www/下的文件，这里有几种常见的问题:</p>
<h4 id="问题1：浏览器能够登录但不显示ftp目录"><a href="#问题1：浏览器能够登录但不显示ftp目录" class="headerlink" title="问题1：浏览器能够登录但不显示ftp目录"></a>问题1：浏览器能够登录但不显示ftp目录</h4><ol>
<li>问题描述：<br>用户可以登录，但浏览器的页面只显示：index of ,而不显示任何ftp目录中文件或文件夹，这是由于selinux的机制。</li>
<li>解决方案：<br>执行<code>sudo getsebool -a | grep ftp</code><br>结果大概是这样的：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftpd_anon_write --&gt; off</span><br><span class="line">ftpd_connect_all_unreserved --&gt; on</span><br><span class="line">ftpd_connect_db --&gt; off</span><br><span class="line">ftpd_full_access --&gt; off</span><br><span class="line">ftpd_use_cifs --&gt; off</span><br><span class="line">ftpd_use_fusefs --&gt; off</span><br><span class="line">ftpd_use_nfs --&gt; off</span><br><span class="line">ftpd_use_passive_mode --&gt; off</span><br><span class="line">httpd_can_connect_ftp --&gt; off</span><br><span class="line">httpd_enable_ftp_server --&gt; off</span><br><span class="line">tftp_anon_write --&gt; off</span><br><span class="line">tftp_home_dir --&gt; off</span><br></pre></td></tr></table></figure>
如果你的ftpd_full_access 参数值为off,则执行<code>sudo setsebool -P ftpd_full_access 1</code> 将<code>ftpd_full_access</code>由off改成on.</li>
</ol>
<p>再次执行<br><code>sudo getsebool -a | grep ftp</code></p>
<p>显示<code>ftpd_full_access --&gt; on</code>修改成功</p>
<p>重启vsftpd服务，问题应该解决了。</p>
<h4 id="问题2：反复弹出ftp登录页面"><a href="#问题2：反复弹出ftp登录页面" class="headerlink" title="问题2：反复弹出ftp登录页面"></a>问题2：反复弹出ftp登录页面</h4><ol>
<li>问题描述：<br>正确输入ftp用户名密码确认后，浏览器仍不停的弹出ftp登录页面</li>
<li>解决方案：执行命令<br><code>sudo usermod -d /var/www/ ftpuser</code><br>来指定你ftpuser的主目录。</li>
</ol>
<h4 id="问题3：500-OOPS-can-not-change-directory"><a href="#问题3：500-OOPS-can-not-change-directory" class="headerlink" title="问题3：500 OOPS: can not change directory"></a>问题3：500 OOPS: can not change directory</h4><ol>
<li>问题描述：<br>Filezilla连接ftp服务器时报错：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Response:   500 OOPS: cannot change directory:&#x2F;home&#x2F;www</span><br><span class="line">Error:  Critical error: Could not connect to server</span><br></pre></td></tr></table></figure></li>
<li>解决方案：指定ftp用户的主目录<br><code>usermod -d /var/www/ ftpuser</code>,<br>这里注意,/var/www/ftpuser该路径要用绝对路径.<h4 id="问题4：-530-Login-incorrect"><a href="#问题4：-530-Login-incorrect" class="headerlink" title="问题4： 530 Login incorrect"></a>问题4： 530 Login incorrect</h4></li>
<li>问题描述：在客户端登录vsftpd时报 530 login incorret 错误，这是登录过程中的鉴权失败的报错。</li>
<li>解决方案：</li>
</ol>
<ul>
<li>方法i-注释掉/etc/pam.d/vsftpd文件里这后一行：auth required pam_shells.so，不去pam鉴权</li>
<li>方法ii-在/etc/shells文件里面增加一行：/sbin/nologin,这样允许不能登录系统的用户通过鉴权</li>
</ul>
<h4 id="附：vsftpd常见错误代码及原因"><a href="#附：vsftpd常见错误代码及原因" class="headerlink" title="附：vsftpd常见错误代码及原因"></a>附：vsftpd常见错误代码及原因</h4><p><strong>服务名</strong>: vsftpd.service  </p>
<p><strong>配置目录</strong>: /etc/vsftpd  </p>
<p><strong>主配置文件</strong>: /etc/vsftpd/vsftpd.conf  </p>
<p><strong>默认发布目录</strong>: /var/ftp  </p>
<p><strong>报错信息</strong>：</p>
<table>
<thead>
<tr>
<th align="center">错误代码</th>
<th align="center">原因</th>
</tr>
</thead>
<tbody><tr>
<td align="center">550</td>
<td align="center">程序本身拒绝</td>
</tr>
<tr>
<td align="center">553</td>
<td align="center">文件系统权限限制</td>
</tr>
<tr>
<td align="center">500</td>
<td align="center">权限过大</td>
</tr>
<tr>
<td align="center">530</td>
<td align="center">认证失败</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>development</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>RHEL</tag>
        <tag>linux</tag>
        <tag>FTP</tag>
        <tag>vsftpd</tag>
        <tag>AWS</tag>
        <tag>FileZilla</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary of FTP building up in RHEL</title>
    <url>/2020/06/29/development/linux/Summary-of-FTP-building-up-in-RHEL/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p> 该博客为记录自己在AWS的RHEL服务器上搭建FTP并成功实现从本地上传文件到服务起的过程，期间遇到了不少问题，经过一系列挣扎后，之一解决，特此记录，希望遇到相似问题的小伙伴们少走弯路。</p>
<h3 id="背景（环境）"><a href="#背景（环境）" class="headerlink" title="背景（环境）"></a>背景（环境）</h3><ul>
<li>server - RHEL on AWS ，</li>
<li>client - win10 OS</li>
<li>FTP server - vsftpd</li>
<li>FTP clent - FileZilla</li>
</ul>
<p>在RHEL8系统中，yum源已包含vsftpd，因此可直接安装vsftpd包并启动对应的服务，一台FTP服务器就搭建好了,默认的vsftpd服务具备一台标准FTP服务器的能力.</p>
<h3 id="搭建FTP服务器"><a href="#搭建FTP服务器" class="headerlink" title="搭建FTP服务器"></a>搭建FTP服务器</h3><ol>
<li><p>安装vsftpd<br><code>yum -y install vsftpd</code><br>查看<br><code>rpm -q vsftpd</code><br>vsftpd-3.0.3-31.el8.x86_64</p>
</li>
<li><p>启用vsftpd服务，并设为开机自动运行<br><code>service vsftpd restart</code><br><code>sudo chkconfig --level 345 vsftpd on</code></p>
</li>
<li><p>vsftpd服务默认通过TCP 21端口监听客户端请求：<br><code>netstat -anptu | grep vsftpd</code><br><code>tcp6       0      0 :::21                   :::*                    LISTEN      21387/vsftpd</code></p>
</li>
<li><p>新建用户<br><code>useradd ftpuser</code><br>create your folders for ftp, for example /var/www:<br><code>sudo mkdir /var/www</code></p>
</li>
<li><p>修改目录/var/www权限为只读<br><code>sudo chmod 555 /var/www</code></p>
</li>
<li><p>修改目录/var/www/html权限为可写<br><code>sudo chmod -R 755 /var/www/html</code></p>
</li>
<li><p>修改目录的所有者及组<br><code>sudo chown -R ftpuser-ftp /var/www</code></p>
</li>
<li><p>修改用户的主目录<br><code>sudo usermod -d /var/www/ ftpuser</code></p>
</li>
<li><p>在你的AWS实例管理界面的secruity group 里添加inbound rules:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Protocol</th>
<th>Port Range</th>
<th>Source</th>
</tr>
</thead>
<tbody><tr>
<td>SSH</td>
<td>TCP</td>
<td>22</td>
<td>ip/32</td>
</tr>
<tr>
<td>HTTP</td>
<td>TCP</td>
<td>80</td>
<td>0.0.0.0/0</td>
</tr>
<tr>
<td>Custom TCP Rule</td>
<td>TCP</td>
<td>20 - 21</td>
<td>0.0.0.0/0</td>
</tr>
<tr>
<td>Custom TCP Rule</td>
<td>TCP</td>
<td>1024 - 1048</td>
<td>0.0.0.0/0</td>
</tr>
</tbody></table>
</li>
<li><p>修改vsftpd配置文件vsftpd.conf<br><code>sudo vi /etc/vsftpd/vsftpd.conf</code></p>
</li>
<li><p>Disable掉 anonymous FTP(安全考虑):<br>将<code>anonymous_enable=YES</code>改为<code>no</code>,并在文件结尾添加如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pasv_min_port&#x3D;1024</span><br><span class="line">pasv_max_port&#x3D;1048</span><br><span class="line">pasv_address&#x3D;&lt;你的服务器IP地址&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>在/etc/vsftpd/里：<br><code>sudo vim user_list</code><br>文件内容大概是这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vsftpd userlist  </span><br><span class="line"># If userlist_deny&#x3D;NO, only allow users in this file  </span><br><span class="line"># If userlist_deny&#x3D;YES (default), never allow users in this  file, and</span><br><span class="line"># do not even prompt for a password.</span><br><span class="line"># Note that the default vsftpd pam config also checks &#x2F;etc&#x2F;vsftpd&#x2F;ftpusers</span><br><span class="line"># for users that are denied.</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br></pre></td></tr></table></figure>
<p>意思是，不允许列表中的这些用户访问FTP，你可以通过修改这个列表改变安全策略，目前我们的用户ftpuser不在这个列表中。</p>
</li>
<li><p>将用户限制在其主目录中(安全考虑): 在配置文件<code>vsftpd.conf</code>中，取消<code>chroot_local_user=YES</code>的注释。</p>
</li>
<li><p>重启vsftpd服务:<br><code>sudo service vsftpd restart</code><br>查看状态<br><code>sudo service vsftpd status</code></p>
</li>
<li><p>将FTP的默认上传目录改为建好的ftp目录/var/www:<br>添加<code>local_root=/var/www/</code>到配置文件<code>vsftpd.conf</code>最后.</p>
</li>
<li><p>重启ftp服务：<br><code>sudo service vsftpd restart</code><br><code>sudo service vsftpd status</code></p>
<p>至此，服务器端的vsftp服务配置完成。</p>
</li>
</ol>
<h3 id="FTP客户端"><a href="#FTP客户端" class="headerlink" title="FTP客户端"></a>FTP客户端</h3><p>可以使用专门的FTP客户端/管理工具（FTP命令程序、Filezilla图形工具），也可以使用Web浏览器、下载工具（比如wget）等支持FTP协议的通用软件。<br>使用web浏览器访问FTP服务器的其方法是：</p>
<ul>
<li><code>ftp://服务器地址/path/to/file</code></li>
<li>对于要求登录验证才能访问的FTP资源，可以在地址中指定用户名、密码信息：<br><code>ftp://user:pass@服务器地址/path/to/file</code></li>
</ul>
<p>FTP客户端这里以FileZilla为例:</p>
<p>下载：<a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla下载</a></p>
<p>安装后，依次输入host, username, password,点击quickconnect即可。注意这里的username只能是你的ftp用户。<br>连接成功后你可以测试一下，按照我们的配置，用户ftpuser对/var/www目录没有写权限，所以你不能上传文件至var/www目录，但是可以上传至/var/www/html目录。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>至此，我们完成了在AWS的RHEL8-ec2服务器上的FTP服务，ftp客户端FileZilla的搭建的过程。如果你是按照我的步骤来进行，应该不会出问题，但由于vsftpd的版本不一样，默认的参数配置也会有区别，如果你确实遇到问题，请参见下一篇文章：<a href="http://localhost:4000/2020/07/01/development/linux/AWS%E4%B8%8ARHEL-ec2-vsftpd%E6%90%AD%E5%BB%BA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">AWS上RHEL-ec2 vsftpd搭建常见问题总结</a></p>
]]></content>
      <categories>
        <category>development</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>RHEL</tag>
        <tag>linux</tag>
        <tag>FTP</tag>
        <tag>vsftpd</tag>
        <tag>AWS</tag>
        <tag>FileZilla</tag>
      </tags>
  </entry>
  <entry>
    <title>Jhipster学习系列(一)</title>
    <url>/2018/04/28/development/web%20dev/Jhipster%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%B8%80/</url>
    <content><![CDATA[<a id="more"></a>

<h3 id="jHipster简介"><a href="#jHipster简介" class="headerlink" title="jHipster简介"></a>jHipster简介</h3><ol>
<li>JHipster或者称Java Hipster，是一个应用代码产生器，能够创建<code>Spring Boot</code> +<br><code>AngularJS</code>的应用。开源项目地址：<code>JHipster/Github</code>.<br>JHipster使用<code>Node.js</code>和<code>Yeoman</code>产生Java应用代码，使用Maven(Gradle)运行产生<br>的代码，产生代码有如下关键特征：</li>
</ol>
<ul>
<li><code>src/main/java</code>目录有Spring Boot 配置类在config包中，JHipster使用Spring的<br>Java 配置，没有XML配置。</li>
<li>JPA实体或MongoDB文档类是在domain包. JPA实体使用缓存和<code>autogenerated</code><br>主键配置. 如果你使用JHipster产生你的JPA实体, 可以创建1:N和<br>N:N关系。</li>
<li>在repostiory包中是Spring Data 仓储.<br>可选，通常<code>@Service-beans</code> 在服务层. 这些服务通常是配置为事务的,安<br>全的业务对象。</li>
<li>REST 端点存在<code>web.rest</code> 包中, 支持<code>Spring MVC</code>的<code>REST</code></li>
<li>JHipster也产生 <code>Liquibase</code> 改变日志文件，用来处理数据库更新，增加一个实<br>体将创建特定的schema更新，这将会版本化，当应用重启时可被执行。<br>集成Spring的 Test 上下文测试支持.</li>
</ul>
<ol start="2">
<li><p>JHipster 创建完整可用的AngularJS 前端，使用CRUD来管理你产生的实体。</p>
</li>
<li><p>JHipster 是一个 Yeoman generator, 用于创建基于 Spring Boot + AngularJS/React 的<br>项目。简易直说它是工具集堆综合技术，意思是由多种技术工具配置而成的Java Web<br>开发程式产生器。好处是由Java专家累积的开发经验，配上各类实用的框架技<br>术，去繁取精的运用，全方位的配置，制成出完备的开发应用程式，绝对适用<br>于面向服务的体系结构 (SOA)。</p>
</li>
<li><p>JHipster包括最先进的Java 8，特色是多用注解和JavaConfig, 不用XML 配置的<br>组态，配备了全方位的工作环境，从开发，测试，监控到制成，以及云部署。<br>能提供最先进的Java 技术如微服务综合技术 （Microservices）。</p>
</li>
</ol>
<ul>
<li><p>单页面Web应用</p>
</li>
<li><p>响应式页面设计</p>
</li>
<li><p>HTML5 Boilerplate</p>
</li>
<li><p>Twitter Bootstrap</p>
</li>
<li><p>AngularJS/React</p>
</li>
<li><p>兼容 IE9+ 和其他现代浏览器</p>
</li>
<li><p>完整的国际化支持，基于 Angular Translate</p>
</li>
<li><p>可选 Sass 用于 CSS 设计</p>
</li>
<li><p>可选 Spring Websocket 来实现 WebSocket<br>强大的 Yeoman 开发工作流:</p>
</li>
<li><p>使用 Bower 可以轻松的安装 JavaScript 类库</p>
</li>
<li><p>使用 Gulp.js 构建, 优化项目, 支持 live reload</p>
</li>
<li><p>使用 Karma and PhantomJS 进行测试<br>那么，如果单页面应用不能满足你的需求呢？</p>
</li>
<li><p>支持 Thymeleaf 模板引擎, 用于在服务端渲染页面</p>
</li>
<li><p>完整的 Spring 应用</p>
</li>
<li><p>Spring Boot 用于简化应用配置</p>
</li>
<li><p>Maven 或者 Gradle 用于构建，测试和运行应用</p>
</li>
<li><p>“development” 和 “production” 配置文件 (支持 Maven 和 Gradle)</p>
</li>
<li><p>Spring Security</p>
</li>
<li><p>Spring MVC REST + Jackson</p>
</li>
<li><p>可选的 WebSocket 支持 – 基于 Spring Websocket</p>
</li>
<li><p>Spring Data JPA + Bean 验证</p>
</li>
<li><p>使用 Liquibase 实现数据库自动更新</p>
</li>
<li><p>Elasticsearch 支持对数据库的搜索功能</p>
</li>
<li><p>支持像MongoDB 这样的 document-oriented NoSQL 数据库</p>
</li>
<li><p>支持像Cassandra 这样的 column-oriented NoSQL 数据库</p>
</li>
<li><p>Monitoring with Metrics 监控运行状态</p>
</li>
<li><p>支持 ehcache (本地缓存) 或者 hazelcast (分布式缓存)</p>
</li>
<li><p>可选的 HTTP session 集群 – 基于 hazelcast</p>
</li>
<li><p>优化的静态资源(gzip filter, HTTP cache headers)</p>
</li>
<li><p>日志管理 Logback, 可在运行时配置</p>
</li>
<li><p>HikariCP 连接池，用于性能优化</p>
</li>
<li><p>可以将应用构建成一个标准的 WAR 文件或者一个可执行的 JAR 文件</p>
</li>
</ul>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>假设你已具备下列环境：<br>JDK 8+<br>Maven或者Gradle<br>NodeJs<br>MySql（可选）<br>Git<br>Eclipse或Intellij IDEA<br>window 管理员权限的 cmd、PowerShell或者cmder<br>阿里maven镜像<br>JHipster 4.0+ 推荐使用yarn替代npm进行包管理</p>
<h3 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h3><ol>
<li>下载最新版yarn压缩包 <code>latest.tar.gz</code></li>
<li>解压其中的 dist 里面的内容到本地文件夹,例如 <code>d:\yarn</code></li>
<li>将 <code>d:\yarn\bin</code> 添加到 <code>PATH</code> 中,如果是讲解压的内容全部放<br>在 <code>d:\yarn</code> 中，则 <code>d:\yarn\dist\bin</code> 添加到 <code>PATH</code></li>
<li>修改yarn库路径 <code>yarn config set cache-folder &quot;你自己的缓存文件夹&quot;</code> 例<br>如 <code>d:\yarn\cache-folder</code></li>
<li>修改为阿里镜像 <code>yarn config set registry
&quot;https://registry.npm.taobao.org&quot;</code> ,设置完后可以使用 yarn config<br>list 查看是否生效,如果要移除淘宝库,使用 <code>yarn config delete
registry</code> 则 registry 重置成默认库 <code>https://registry.yarnpkg.com</code></li>
<li>注意，最新版本(gateway ng2)使用淘宝镜像会报错，如果持续报错无效，删除<br>淘宝镜像，用自带的即可。</li>
<li>如果还异常，可以 设置npm 的registry:<code>npm config set registry</code><br><code>&quot;https://registry.npmjs.org&quot;</code></li>
</ol>
<h3 id="安装jhipster"><a href="#安装jhipster" class="headerlink" title="安装jhipster"></a>安装jhipster</h3><p>安装步骤</p>
<ol>
<li>修改npm全局路径<br><code>npm config set cache &quot;nodejs安装目录\node_cache&quot;</code><br><code>npm config set prefix &quot;nodejs安装目录\node_npm&quot;</code></li>
<li>删除 用户变量 PATH 中的npm的环境变量 C:\Users\用户名<br>\AppData\Roaming\npm 删除</li>
<li>安装 Yeoman: <code>yarn global add yo@1.8.5</code></li>
<li>安装 JHipster: <code>yarn global add generator-jhipster</code><br><code>xx@version</code> 是安装指定版本，若未指定，则是最新的<br>至此，JHipster已经安装完毕</li>
</ol>
<h3 id="jhispter生成单体项目"><a href="#jhispter生成单体项目" class="headerlink" title="jhispter生成单体项目"></a>jhispter生成单体项目</h3><p>这一部分很简单，官方文档写得很清楚 ： <a href="https://www.jhipster.tech/creating-an-app/" target="_blank" rel="noopener">jhipster创建应用</a></p>
<h3 id="创建综合应用"><a href="#创建综合应用" class="headerlink" title="创建综合应用"></a>创建综合应用</h3><p><code>mkdir jhipster\app</code><br><code>cd jhipster\app</code><br><code>yo jhipster</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? (1&#x2F;15) Which *type* of application would you like to create? (</span><br><span class="line">Use arrow keys) &#x2F;&#x2F;选择创建的应用类型</span><br><span class="line">&gt; Monolithic application (recommended for simple projects) &#x2F;&#x2F;综合</span><br><span class="line">应用</span><br><span class="line">Microservice application &#x2F;&#x2F;微服务应用</span><br><span class="line">Microservice gateway &#x2F;&#x2F;微服务网关</span><br><span class="line">[BETA] JHipster UAA server (for microservice OAuth2 authenticat</span><br><span class="line">ion) &#x2F;&#x2F;微服务OAuth2的身份认证服务</span><br><span class="line">? (2&#x2F;15) Which *Framework* would you like to use for the client?</span><br><span class="line">&#x2F;&#x2F;选择AngularJS 版本</span><br><span class="line">AngularJS 1.x</span><br><span class="line">&gt; [BETA] Angular 2.x</span><br><span class="line">? (3&#x2F;15) What is the base name of your application? (app) &#x2F;&#x2F;服务</span><br><span class="line">名</span><br><span class="line">? (4&#x2F;15) Would you like to install other generators from the JHi</span><br><span class="line">pster Marketplace? No &#x2F;&#x2F;从JHipster Marketplace 安装其他生成器</span><br><span class="line">? (5&#x2F;15) What is your default Java package name? (com.shunneng.a</span><br><span class="line">pp) &#x2F;&#x2F;默认包名</span><br><span class="line">? (6&#x2F;15) Which *type* of authentication would you like to use? (</span><br><span class="line">Use arrow keys) &#x2F;&#x2F;选择认证方式</span><br><span class="line">&gt; HTTP Session Authentication (stateful, default Spring Security</span><br><span class="line">mechanism) &#x2F;&#x2F;Spring Security默认机制 基于HTTP会话的认证方式(带状态)</span><br><span class="line">OAuth2 Authentication (stateless, with an OAuth2 server impleme</span><br><span class="line">ntation) &#x2F;&#x2F;OAuth2的认证实现(无状态)</span><br><span class="line">JWT authentication (stateless, with a token) &#x2F;&#x2F;J(son)W(eb)T(oke</span><br><span class="line">n)(无状态)</span><br><span class="line">? (7&#x2F;15) Which *type* of database would you like to use? (Use ar</span><br><span class="line">row keys) &#x2F;&#x2F;选择数据库类型</span><br><span class="line">&gt; SQL (H2, MySQL, MariaDB, PostgreSQL, Oracle) &#x2F;&#x2F;关系型数据库</span><br><span class="line">MongoDB &#x2F;&#x2F;NoSQL</span><br><span class="line">Cassandra &#x2F;&#x2F;NoSQL</span><br><span class="line">? (8&#x2F;15) Which *production* database would you like to use? (Use</span><br><span class="line">arrow keys) &#x2F;&#x2F;生产数据库</span><br><span class="line">&gt; MySQL</span><br><span class="line">MariaDB</span><br><span class="line">PostgreSQL</span><br><span class="line">Oracle - Warning! The Oracle JDBC driver (ojdbc) is not bundle</span><br><span class="line">d because it is not Open Source. Please follow our documentation</span><br><span class="line">to instal l it manually.</span><br><span class="line">Microsoft SQL Server</span><br><span class="line">? (9&#x2F;15) Which *development* database would you like to use? (Us</span><br><span class="line">e arrow keys) &#x2F;&#x2F;开发数据库</span><br><span class="line">&gt; H2 with disk-based persistence &#x2F;&#x2F;数据存储在磁盘的H2</span><br><span class="line">H2 with in-memory persistence &#x2F;&#x2F;内存H2（服务关闭数据丢失）</span><br><span class="line">MySQL</span><br><span class="line">? (10&#x2F;15) Do you want to use Hibernate 2nd level cache? (Use arr</span><br><span class="line">ow keys) &#x2F;&#x2F;Hibernate 二级缓存</span><br><span class="line">No</span><br><span class="line">&gt; Yes, with ehcache (local cache, for a single node) &#x2F;&#x2F;本地缓存方</span><br><span class="line">案 ehcache</span><br><span class="line">Yes, with HazelCast (distributed cache, for multiple nodes) &#x2F;&#x2F;</span><br><span class="line">集群缓存方案，多节点缓存，适合多微服务的分布式环境</span><br><span class="line">? (11&#x2F;15) Would you like to use Maven or Gradle for building the</span><br><span class="line">backend? (Use arrow keys) &#x2F;&#x2F;选择后台构建系统</span><br><span class="line">&gt; Maven &#x2F;&#x2F;更成熟，稳定，用户群体更大</span><br><span class="line">Gradle &#x2F;&#x2F;更灵活，易于扩展，支持maven一键转Gradle</span><br><span class="line">? (12&#x2F;15) Which other technologies would you like to use? (Press</span><br><span class="line">&lt;space&gt; to select) &#x2F;&#x2F;可选技术</span><br><span class="line">&gt;( ) Social login (Google, Facebook, Twitter) &#x2F;&#x2F;第三方社交登录，基</span><br><span class="line">于OAuth2.0</span><br><span class="line">( ) Search engine using ElasticSearch &#x2F;&#x2F;集成搜索开源搜索引擎 Elast</span><br><span class="line">icSearch</span><br><span class="line">( ) Clustered HTTP sessions using Hazelcast &#x2F;&#x2F;使用Hazelcast管理h</span><br><span class="line">ttp session集群</span><br><span class="line">( ) WebSockets using Spring Websocket &#x2F;&#x2F;使用Spring Websocket</span><br><span class="line">( ) [BETA] Asynchronous messages using Apache Kafka &#x2F;&#x2F;Apache Ka</span><br><span class="line">fka 是一种高吞吐量的分布式发布订阅消息系统</span><br><span class="line">? (13&#x2F;15) Would you like to use the LibSass stylesheet preproces</span><br><span class="line">sor for your CSS? (y&#x2F;N) &#x2F;&#x2F;建议使用gulp定时构建，将sass转换成css而不是</span><br><span class="line">运行时处理</span><br><span class="line">? (14&#x2F;15) Would you like to enable internationalization support?</span><br><span class="line">(Y&#x2F;n) &#x2F;&#x2F;是否使用国际化</span><br><span class="line">? Please choose the native language of the application? (Use arr</span><br><span class="line">ow keys) &#x2F;&#x2F;选择本地化语言</span><br><span class="line">Catalan</span><br><span class="line">&gt; Chinese (Simplified) &#x2F;&#x2F;中文简体</span><br><span class="line">Chinese (Traditional)</span><br><span class="line">Czech</span><br><span class="line">Danish</span><br><span class="line">Dutch</span><br><span class="line">English</span><br><span class="line">(Move up and down to reveal more choices)</span><br><span class="line">? Please choose additional languages to install (Press &lt;space&gt; t</span><br><span class="line">o select)&#x2F;&#x2F;选择其余支持语言</span><br><span class="line">&gt;( ) Catalan</span><br><span class="line">( ) Chinese (Traditional)</span><br><span class="line">( ) Czech</span><br><span class="line">( ) Danish</span><br><span class="line">( ) Dutch</span><br><span class="line">( ) English</span><br><span class="line">( ) French</span><br><span class="line">(Move up and down to reveal more choices)</span><br><span class="line">? (15&#x2F;15) Which testing frameworks would you like to use? (Press</span><br><span class="line">&lt;space&gt; to select) &#x2F;&#x2F;默认情况下 JHipster 提供 java 单元&#x2F;集成测试（使</span><br><span class="line">用Spring JUnit支持）和 JavaScript 单元测试（使用Karma.js）。这也是一个</span><br><span class="line">可选项。</span><br><span class="line">&gt;( ) Gatling &#x2F;&#x2F;使用 Gatling 进行性能测试。</span><br><span class="line">( ) Cucumber &#x2F;&#x2F;使用 Cucumber 模拟用户行为</span><br><span class="line">( ) Protractor &#x2F;&#x2F;使用 Protractor 对 AngularJS 进行集成测试</span><br></pre></td></tr></table></figure>
<p>第一次创建比较慢，后边如果要创建综合应用或者微服务网关应用，可以将<br><code>node_modules</code> 复制到其目录下面。<br>项目生成后，windows/系统在项目根目录运行<code>mvnw</code>，浏览器打开<code>localhost：8080</code>就会进入jhipster的界面，登陆后就可以看到：<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200702171030.png" alt=""></p>
<p>避免文章过长，后续内容参见下一篇博客:<a href="http://localhost:4000/2018/05/01/development/web%20dev/Jhipster%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%BA%8C/" target="_blank" rel="noopener">Jhipster学习系列（二）</a></p>
]]></content>
      <categories>
        <category>development</category>
        <category>web dev</category>
      </categories>
      <tags>
        <tag>jhipster</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/18/development/web%20dev/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>development</category>
        <category>web dev</category>
      </categories>
  </entry>
  <entry>
    <title>Jhipster学习系列(二)</title>
    <url>/2018/05/01/development/web%20dev/Jhipster%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%BA%8C/</url>
    <content><![CDATA[<a id="more"></a>

<p>上文参见：<a href="http://localhost:4000/2018/04/28/development/web%20dev/Jhipster%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97-%E4%B8%80/" target="_blank" rel="noopener">jhipster学习系列（一）</a></p>
<h3 id="jhipster生成微服务项目及其配置"><a href="#jhipster生成微服务项目及其配置" class="headerlink" title="jhipster生成微服务项目及其配置"></a>jhipster生成微服务项目及其配置</h3><p>创建jhipster-registry（这里有坑，至少在国内看来是有些bug的，不过还好查了些资料可以解决）</p>
<p>直接从github上拉取jhipster-registry代码：</p>
<p><code>git clone https://github.com/jhipster/jhipster-registry.git</code></p>
<p>进入jhipster-registry目录后：</p>
<p>运行</p>
<p><code>yarn</code></p>
<p>会报错，查看提示，是node-sass的问题，所以</p>
<p><code>yarn add global node-sass@4.8.0</code></p>
<p>这里必须要加版本号，不然的话默认安装的好像是4.5版本的，与node8不兼容（我的node版本），这里的兼容情况可以在github里找到node-sass的releases里tag里找到.</p>
<p>另外，yarn的全局安装目录应该是<code>C:\Users\Administrator\AppData\Local\Yarn\Data\global\node_modules</code>(这是我的，仅作参考).<br>运行会报错，在你的<a href="mailto:node-sass@4.8.0github">node-sass@4.8.0github</a>上下载不到<code>win32-x64-57_binding.node</code>文件，所以需要自己先下载下来， </p>
<p>下载地址：<a href="https://github.com/sass/node-sass/releases/tag/v4.8.0" target="_blank" rel="noopener">点击下载</a></p>
<p>至于为什么是win32-x64-57_binding.node这个版本，可以用这个命令查看自己环境的适配版本：</p>
<p><code>node -p &quot;[process.platform, process.arch, process.versions.modules].join(&#39;-&#39;)&quot;</code></p>
<p>设置sass路径：</p>
<p><code>set SASS_BINARY_PATH=D:/nodejs/.nodes/win32-x64-57_binding.node</code></p>
<p>再次安装node-sass，这样应该还会报错，根据提示，应该是phantomjs环境问题，jhipster-registry前端打包需要phantomjs环境，在命令执行过程中会下载一个文件phantomjs-2.1.1-windows.zip，但是这个境外的下载会出问题一直下不下来，所以报错，解决办法是在这里下载这个文件：</p>
<p><a href="http://qiniu.huicode.top/soft/phantomjs-2.1.1-macosx.zip" target="_blank" rel="noopener">http://qiniu.huicode.top/soft/phantomjs-2.1.1-macosx.zip</a><br><a href="http://qiniu.huicode.top/soft/phantomjs-2.1.1-linux-x86_64.tar.bz2" target="_blank" rel="noopener">http://qiniu.huicode.top/soft/phantomjs-2.1.1-linux-x86_64.tar.bz2</a><br><a href="http://qiniu.huicode.top/soft/phantomjs-2.1.1-windows.zip" target="_blank" rel="noopener">http://qiniu.huicode.top/soft/phantomjs-2.1.1-windows.zip</a><br>//qiniu.huicode.top/soft/phantomjs-2.1.1-macosx.zip<br><a href="http://qiniu.huicode.top/soft/phantomjs-2.1.1-linux-x86_64.tar.bz2" target="_blank" rel="noopener">http://qiniu.huicode.top/soft/phantomjs-2.1.1-linux-x86_64.tar.bz2</a><br><a href="http://qiniu.huicode.top/soft/phantomjs-2.1.1-windows.zip" target="_blank" rel="noopener">http://qiniu.huicode.top/soft/phantomjs-2.1.1-windows.zip</a></p>
<p>然后把压缩包放在这个目录（报错会提示这个目录，这是我的）：</p>
<p><code>C:\Users\Administrator\AppData\Local\Temp\phantomjs</code><br>重新运行命令<br><code>yarn add global node-sass@4.8.0</code><br>build成功<br>执行：<br><code>mvnw</code><br>成功后浏览器打开localhost：8080，界面：<br>​​​​​​<img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200702163822.png" alt=""></p>
<p>登陆后<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200702163848.png" alt=""></p>
<p>（注：最近在网上发现另外一种方法，直接运行下面指令配置sass国内镜像：</p>
<p><code>yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</code></p>
<p>就避免了安装sass时遇到的各种问题了，这种方法应该也是可以的）</p>
<p>后续内容见下篇博客：</p>
]]></content>
      <categories>
        <category>development</category>
        <category>web dev</category>
      </categories>
  </entry>
  <entry>
    <title>百度云GPU主机nvidia显卡驱动和cuda安装</title>
    <url>/2020/07/03/ML&amp;DL/%E7%99%BE%E5%BA%A6%E4%BA%91GPU%E4%B8%BB%E6%9C%BAnvidia%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%92%8Ccuda%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<a id="more"></a>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>百度云GPU主机</li>
<li>aria2<h3 id="添加驱动源"><a href="#添加驱动源" class="headerlink" title="添加驱动源"></a>添加驱动源</h3><code>sudo add-apt-repository ppa:graphics-drivers/ppa</code><br><code>sudo apt-get update</code><h3 id="2-安装Nvidia驱动"><a href="#2-安装Nvidia驱动" class="headerlink" title="2.安装Nvidia驱动"></a>2.安装Nvidia驱动</h3><code>sudo apt-get install nvidia-367</code><br><code>sudo apt-get install mesa-common-dev</code><br><code>sudo apt-get install freeglut3-dev</code><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3>重启机器：<br><code>sudo reboot</code><br><code>nvidia-smi</code><br>如果出现了你的GPU列表，则说明驱动安装成功了,另外，通过：<br><code>nvidia-settings</code><br>如果显示自己机器上详细的GPU信息，也说明安装成功。</li>
</ul>
<h3 id="使用aria2下载CUDA8-0"><a href="#使用aria2下载CUDA8-0" class="headerlink" title="使用aria2下载CUDA8.0"></a>使用aria2下载CUDA8.0</h3><p><a href="http://developer2.download.nvidia.com/compute/cuda/8.0/secure/Prod2/local_installers/cuda_8.0.61_375.26_linux.run?BE5UwVtdx1qOSXGlLZrDPBI-8R_QEVT5NXWlmdEXeXWtUkPZngemVgMPEXTnIH81sSHBZQMvJxq-Sga204QpbbfGVqpFKIIQXPTR4TPiwlH9uD4x4NmWpUJOEl_foKhj7WgtzKmp0uV75Qy_Luc5C1osdM9ZcW3AhIoDaaV9uSiDKTDWo4mINAov" target="_blank" rel="noopener">CUDA8.0下载地址</a></p>
<p>*大小：<code>1.4G</code><br>*名称：<code>cuda_8.0.61_375.26_linux.run</code></p>
<p>使用<code>Aria2</code>下载（<code>aria2</code>安装：<code>sudo apt-get install aria2</code>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c -s 3 http:&#x2F;&#x2F;developer2.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;8.0&#x2F;secure&#x2F;Prod2&#x2F;local_installers&#x2F;cuda_8.0.61_375.26_linux.run?VOvimfVryGI24xcQZtHNpKQy9VxlQZt8ZR0kVqkWkI6bAr-hxaAXDiuzoS76lgXTrleU-am1NMOP0mP_pXgdEAwWPxFmUgN1OiIBZj9xfxE7y-LQqTNbqvXlLCVVv-w4EyzwOsZo3eCtSjvBqV-Bq4GpUyLL6wS38qNDep79V5WyYnkTomOX6_iq</span><br></pre></td></tr></table></figure>
<p>下载完成后执行命令<br><code>cd ~</code><br><code>mkdir download</code><br><code>cuda_8.0.61_375.26_linux.run download/</code><br><code>sudo sh cuda_8.0.61_375.26_linux.run</code></p>
<p>若Summary提示安装失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It appears that an X server is running. Please exit X before installation</span><br></pre></td></tr></table></figure>
<p>处理方式：<br>再次执行下最后一条命令<code>sudo sh xxx.run</code><br>进行选择时留意以下选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 361.62?</span><br></pre></td></tr></table></figure>
<p>答案必须是N</p>
<p><a href="http://www.52nlp.cn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%BB%E6%9C%BA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ubuntu-16-04-nvidia-gtx-1080-cuda-8" target="_blank" rel="noopener">参考这篇文章</a></p>
<p>执行后安装后显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Driver:   Not Selected</span><br><span class="line">Toolkit:  Installed in &#x2F;usr&#x2F;local&#x2F;cuda-8.0</span><br><span class="line">Samples:  Installed in &#x2F;home&#x2F;john, but missing recommended libraries</span><br><span class="line">Driver:   Not Selected</span><br></pre></td></tr></table></figure>
<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><p><code>vim ~/.bashrc</code></p>
<p>在末尾添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;bin:$PATH</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;lib64:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>
<p>再执行：<br><code>nvidia-smi</code><br>在测试下刚才安装是否正常：<br><code>cd /usr/local/cuda/samples</code><br><code>cd 1_Utilities/deviceQuery</code><br><code>sudo make</code></p>
<p>执行正常后，在执行<br><code>./deviceQuery</code><br>输出显卡信息，这里则说明cuda安装成功。</p>
<h3 id="下载安装CUDNN"><a href="#下载安装CUDNN" class="headerlink" title="下载安装CUDNN"></a>下载安装CUDNN</h3><p>使用aria2x下载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aria2c -s 3 http:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;redist&#x2F;cudnn&#x2F;v6.0&#x2F;cudnn-8.0-linux-x64-v6.0-rc.tgz</span><br></pre></td></tr></table></figure>
<p>再执行：<br><code>tar -xzvf cudnn-8.0-linux-x64-v6.0.tgz</code></p>
<p><code>sudo cp cuda/include/cudnn.h /usr/local/cuda/include</code></p>
<p><code>sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ -d</code></p>
<p><code>sudo chmod a+r /usr/local/cuda/include/cudnn.h</code></p>
<p><code>sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</code><br>安装完毕。</p>
]]></content>
      <categories>
        <category>ML&amp;DL</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>百度云GPU</tag>
      </tags>
  </entry>
  <entry>
    <title>win7下安装Ubuntu16.04双系统</title>
    <url>/2018/03/27/development/linux/win7%E4%B8%8B%E5%AE%89%E8%A3%85Ubuntu16-04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Ubuntu16.04作为目前一款比较经典的ubuntu系统，相信很多人都想在自己的电脑上安装一下，然而系统的安装方法各式各样，u盘法、grub引导法等等，这里我将介绍在win7系统下用<code>easyBCD</code>软件建立引导，然后安装ubuntu的方法，这就不需要制作u盘启动盘那么麻烦，只需配置一些引导文件即可。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010252.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-工具-原料"><a href="#1-工具-原料" class="headerlink" title="1.工具/原料"></a>1.工具/原料</h3><p><code>win7操作系统</code><br><code>ubuntu16.04系统镜像文件</code><br><code>easyBCD 2.2</code></p>
<h3 id="2-安装系统的前期准备"><a href="#2-安装系统的前期准备" class="headerlink" title="2. 安装系统的前期准备"></a>2. 安装系统的前期准备</h3><ul>
<li>在网上下载<code>ubuntu-16.04-desktop-amd64.iso</code>，百度搜索一下，很多网站都有下载链接，同时准备好<code>easyBCD</code>软件（网上下载最新版）。建议将iso文件移动到d盘根目录，当然也可以放到别的目录。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010350.png" alt=""></li>
<li>打开<code>easyBCD</code>软件，可以看到目前只有一个win7启动项。选择“添加新条目”，然后选择<code>NeoGrub</code>，点击“安装”。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010448.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010531.png" alt=""></li>
<li>然后点击配置<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010604.png" alt=""></li>
</ul>
<p>并将<code>menu.lst</code>文件的内容替换成以下文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title Install Ubuntu</span><br><span class="line">root (hd0,1)</span><br><span class="line">kernel (hd0,1)&#x2F;vmlinuz.efi boot&#x3D;casper iso-scan&#x2F;filename&#x3D;&#x2F;ubuntu-16.04-desktop-amd64.iso locale&#x3D;zh_CN.UTF-8</span><br><span class="line">initrd (hd0,1)&#x2F;initrd.lz</span><br><span class="line">title reboot</span><br><span class="line">reboot</span><br><span class="line">title halt</span><br><span class="line">halt</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010850.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703010941.png" alt=""><br><strong>说明</strong>：<code>hd0</code>表示d盘所处的硬盘号，一般电脑只有一个，所以都是hd0；如果有多个硬盘，则根据情况改为hd0、hd1等。</p>
<p><code>hd0</code>后面的数字表示d盘在硬盘中的分区顺序，每个人的系统不大一样，不知道的可以在磁盘管理里面看一下，本人d盘是第2个分区，因此写为<code>（hd0,1）</code>，如果是第一个，写为（hd0,0）即可。</p>
<ul>
<li>经过配置后，c盘中会多出一个“NST”文件夹和一个<code>NeoGrub</code>文件。接下来把系统镜像文件用<code>DAEMON tools</code>打开，或者以压缩包形式将其中两个文件解压出来，分别是initrd.lz和<code>vmlinuz.efi</code>，这两个文件在casper文件夹里。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011119.png" alt=""></li>
<li>将解压出来的两个文件复制到d盘根目录，可以看看d盘中添加了多少相关的文件。这样，安装系统的前期准备就完成了，可以重启电脑准备安装ubuntu16.04了。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011225.png" alt=""></li>
</ul>
<h3 id="3-安装Ubuntu系统"><a href="#3-安装Ubuntu系统" class="headerlink" title="3. 安装Ubuntu系统"></a>3. 安装Ubuntu系统</h3><ul>
<li><p>重启电脑，可以看到多了一个启动项<code>NeoGrub引导加载器</code>，选择该项enter，然后选择<code>install ubuntu</code>，另外两项分别是<code>reboot</code>和<code>halt</code>，是为了防止安装出错而设的，这个在之前的<code>menu.lst</code>配置文件中已经设定好了。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011441.png" alt=""></p>
</li>
<li><p>接下来如果正常的话，会刷刷的满屏幕文字，很高端的样子，等着它结束就行。如果在这一步报错，一般来说就是之前的<code>menu.lst</code>配置文件不对，无法访问d盘，这时只要<code>reboot</code>然后进入win7重新配置就行。</p>
</li>
<li><p>刷完后就进入一个小系统，别以为这就装好了，此时最重要的一步，通过快捷键<code>ctrl+alt+T</code>打开终端，输入：<code>sudo umount -l /isodevice</code>， 注意空格和小写的L，执行后就可以双击安装图标进行安装了.<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011634.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011718.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011744.png" alt=""></p>
</li>
<li><p>接下来选择简体中文, 不用选中安装第三方软件和更新，否则安装会很慢，为保险起见可以断开网络连接, 安装类型选择<code>其他选项</code>。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011841.png" alt=""></p>
</li>
<li><p>接下来需要设置分区，首先设置交换空间大小，与电脑内存差不多或为电脑内存的两倍。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011856.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011915.png" alt=""><br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011935.png" alt=""></p>
</li>
<li><p>然后设置其他挂载点的大小，分区方案很多，这里简单的设置<code>/</code>、<code>/boot</code>、<code>/home</code>共3个分区，均为<code>ext4</code>文件系统。size分别为<code>/</code>10G；<code>/boot</code> 100M;<code>/home</code> 剩余所有空间。注意linux系统的1G对应1000M。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703011943.png" alt=""></p>
</li>
<li><p>接下来就是简单的设置地区、键盘布局，接着就是用户名和密码。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703012006.png" alt=""></p>
</li>
<li><p>以上所有东西都设置好了，就自动开始安装系统，等待一段时间就可以，如果安装过程在下载东西，可以点击<code>跳过</code>，因为系统安装完成后同样可以更新下载。</p>
</li>
<li><p>安装完成后点击<code>现在重启</code>，可以看到多了好多启动项，界面也变了。选择第一项<code>启动ubuntu</code>系统，这样就可以愉快的玩转ubuntu啦。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703012042.png" alt=""></p>
</li>
<li><p>安装完后，不要忘了回到win7系统打开<code>easyBCD</code>软件把<code>NeoGrub</code>引导项删除，否则每次进入win7都得选一次。如果觉得以后不想重装Ubuntu了，就可以把C盘的相关文件都删掉，节省空间.当然你也可以不将引导项删除，留着之后linux出问题了重装之用，如果嫌引导界面等待时间过长，可以自行设置，方法网上有，自行百度。<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200703012102.png" alt=""></p>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><code>menu.lst</code>的内容不要弄错，正确判别c盘的分区号</li>
<li>进入小系统后别忘了执行指令<code>sudo umount -l /isodevice</code></li>
<li>新手在为系统分区前可以先网上搜索一下分区方案</li>
<li>小系统是可以直接联网操作的，如果遇到什么不懂的可以通过自带的火狐浏览器进行搜索</li>
</ul>
]]></content>
      <categories>
        <category>development</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>双系统</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Ccode常用插件及快捷键总结</title>
    <url>/2018/07/06/tools/vscode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<a id="more"></a>
<p>Visual Studio Code(VS Code) 是由微软开发的一款免费、跨平台的文本编辑器。这篇文章主要总结下常用的VS Code plugins and shortcut keys，which can greatly improve production efficiency.</p>
<h2 id="VS-Code-常用插件"><a href="#VS-Code-常用插件" class="headerlink" title="VS Code 常用插件"></a>VS Code 常用插件</h2><p><strong>安装方法</strong>：打开vscode，左侧边栏的田字格即为插件市场.</p>
<p><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200706110552.png" alt="插件市场"></p>
<ol>
<li><p><code>Open-In-Browser</code><br>由于 VSCode 没有提供直接在浏览器中打开文件的内置功能，所以此插件在右键快捷菜单中添加了在默认浏览器查看文件选项，以及在客户端（Firefox，Chrome，IE）中打开命令面板选项。</p>
</li>
<li><p><code>prettier</code><br>一键美化你的 JavaScript/TypeScript/CSS 代码</p>
</li>
<li><p><code>vscode-icon</code><br>给vscode 资源树目录加上图标。</p>
</li>
<li><p><code>Auto Close Tag</code><br>自动闭合HTML/XML标签</p>
</li>
<li><p><code>Debugger for Chrome</code><br>映射chrome浏览器中debug</p>
</li>
<li><p><code>JavaScript(ES6) code snippets</code><br>ES6语法智能提示，以及快速输入，不仅仅支持.js，还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js代码文件的时间</p>
</li>
<li><p><code>markdown-extension-pack</code><br>这个插件包含了很多关于几乎所有关于markdown的常用插件.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Markdown All in One - All you need for Markdown (keyboard shortcuts, table of contents, auto    preview and more).</span><br><span class="line">markdownlint - Markdown&#x2F;CommonMark linting and    style checking for Visual Studio Code.</span><br><span class="line">Markdown PDF - This extension convert Markdown    file to pdf, html, png or jpeg file.</span><br><span class="line">Markdown+Math - Mdmath allows to use Visual    Studio Code as a markdown editor capable of    typesetting and rendering TeX math. In fact it    now reuses the built in markdown viewer. KaTeX    works inside as a fast math renderer.</span><br><span class="line">Markdown Preview Enhanced - Markdown Preview    Enhanced is an extension that provides you with    many useful functionalities such as automatic    scroll sync, math typesetting, mermaid, PlantUML,    pandoc, PDF export, code chunk, presentation    writer, etc.</span><br><span class="line">Markdown TOC - Generate TOC (table of contents)    of headlines from parsed markdown file.</span><br><span class="line">Markdown Table Prettifier - Makes tables more    readable for humans. Compatible with the Markdown    writer plugin&#39;s table formatter feature in Atom.</span><br><span class="line">Markdown Emoji - Adds :emoji: syntax support to    VS Code&#39;s built-in Markdown preview.</span><br><span class="line">:emojisense: - Adds suggestions and autocomplete    for emoji to VS Code.</span><br><span class="line">Path Autocomplete - Provides path completion for    visual studio code. Maybe can be used in    inserting file links in Markdown.</span><br><span class="line">Markdown Checkboxes - Adds support for Github&#39;s -    [ ] and - [x] checkbox syntax to VS Code&#39;s    built-in markdown preview.</span><br><span class="line">Markdown Preview Github Styling - Changes VS    Code&#39;s built-in markdown preview to match    Github&#39;s styling.</span><br><span class="line">Markdown Paste - Smartly paste for Markdown.</span><br><span class="line">Markdown Shortcuts - Handy shortcuts for editing    Markdown (.md, .markdown) files. You can also use    markdown formats in any other file.</span><br><span class="line">Excel to Markdown table - This VSCode extension    converts Excel data to Markdown table format.    Available through command Excel to Markdown table    and keyboard shortcut Shift+Alt+V.</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="常用快捷键-注意：我的键盘home-end与left-right方向键是重合的，如果你不是我这种键盘，请格外注意"><a href="#常用快捷键-注意：我的键盘home-end与left-right方向键是重合的，如果你不是我这种键盘，请格外注意" class="headerlink" title="常用快捷键(注意：我的键盘home/end与left/right方向键是重合的，如果你不是我这种键盘，请格外注意)"></a>常用快捷键(注意：我的键盘home/end与left/right方向键是重合的，如果你不是我这种键盘，请格外注意)</h2><ol>
<li>命令面板<br>它是 VS Code 快捷键的主要交互界面，你可以通过 <code>F1</code> 或者<code>Cmd+Shift+P</code>(<code>Windows</code> 上是 <code>Ctrl+Shift+P</code>) 打开.VS Code 的绝大多数命令都可以在命令面板里搜到,你可以在命令面板中快速搜索命令并且执行.</li>
<li>左侧边栏快捷键<br>下图是VS Code 默认界面里的几个常用部件的位置和快捷键<br><img src="https://raw.githubusercontent.com/fireflyuan/picbed/master/blog_files/images/github_picbed20200706132011.png" alt="左侧边栏"></li>
<li>编辑操作  </li>
</ol>
<ul>
<li>光标移动<ul>
<li><code>ctrl+left/right</code><br>通常情况下，用<code>left/right</code>(左方向键和右方向键)移动鼠标光标是逐字母移动的，加上<code>ctrl</code>键以后，鼠标光标光标移动变为逐单词移动,如果光标在单词中间，此快捷键则先会将光标移动到单词前或单词后.这个功能只针对英文单词，对中文不起作用.</li>
<li><code>home/end</code><br>将光标移动到行首或者行末.</li>
<li><code>ctrl+home/end</code><br>将光标移动到文档的首末.</li>
<li><code>ctrl+shift+\</code><br>相对于代码块的光标移动，这个快捷键将会使你的光标在的[],{},(),甚至html标签的开闭处切换.</li>
</ul>
</li>
<li>文本选择<ul>
<li><code>ctrl+shift+left</code><br>选中从单词首到光标所在处的字母段</li>
<li><code>home+shift</code><br>选中行首到光标所在处的所有字符</li>
</ul>
</li>
<li>刪除操作<ul>
<li><code>ctrl+shift+k</code><br>删除当前行</li>
<li><code>Home+Shift</code>再<code>delete</code><br>将光标之前到行首之间的内容全部删除</li>
<li><code>ctrl+delete</code>或者 <code>end+shift</code>再<code>delete</code><br>将光标之后到行末的内容全部删除</li>
<li><code>ctrl+shift+left</code>再<code>delete</code><br>将单词开头到光标之间的部分删除</li>
</ul>
</li>
<li>剪切<ul>
<li><code>ctrl+x</code></li>
</ul>
</li>
<li>换行(光标可以不在行末)<ul>
<li><code>ctrl+enter</code><br>换行到下一行</li>
<li><code>ctrl+shift+enter</code><br>换行到上一行（在当前行上新加一行并开始）</li>
</ul>
</li>
<li>自定义快捷键<br>使用<code>F1</code>打开命令面板并输入：<code>shortcut</code>,找到，perference: open default keyboard shortcuts(json),便可以修改和自定义快捷键了.</li>
<li>移动代码或代码段<br>先选中再<code>alt+up/down</code></li>
<li>复制并移动代码段<br><code>alt+shift+up/down</code></li>
</ul>
<ol start="4">
<li><p>添加注释</p>
<p> <code>ctrl+shift</code><br> 无论是html还是js,系统会自动识别文档格式并添加相应的注释，非常方便.</p>
</li>
<li><p>代码格式化</p>
<p><code>alt+shift+f</code><br>如果是第一次使用，如果你有安装多个格式化的插件，会让你选则一个默认的格式化方式.  </p>
</li>
<li><p>多光标</p>
</li>
</ol>
<ul>
<li>使用鼠标<br>按住<code>alt</code>键的同时选择第二个光标点，这样就实现了多处编辑.</li>
<li><code>ctrl+alt+up/down</code><br>会在每行的同样位置出现光标点</li>
<li>一个技巧<br>可以使用<code>ctrl+alt+up/down</code>结合<code>end</code>键将光标移动到行尾，再使用<code>left/right</code>移动到其他位置.</li>
<li><code>ctrl+d</code><br>会选中光标所在的单词，如果再次<code>ctrl+d</code>，并在所有 相同单词后创建一个光标，这是移动光标，可以达到多处编译的效果</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上便是自己总结的VS Code常用插件及常用快捷键,自己学习的同时希望能对大家有所帮助,如果您喜欢，可以打赏一杯咖啡……</p>
]]></content>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
</search>
